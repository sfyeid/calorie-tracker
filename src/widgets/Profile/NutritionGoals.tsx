"use client"

import { memo, useState } from "react"
import { useForm, Controller } from "react-hook-form"
import { yupResolver } from "@hookform/resolvers/yup"
import * as yup from "yup"
import { Card, CardContent, Typography, Box, TextField, Button, Grid, Skeleton, Alert } from "@mui/material"
import { Save, Edit, Calculate, LocalFireDepartment, FitnessCenter, Opacity, Grain } from "@mui/icons-material"
import { motion } from "framer-motion"

import type { NutritionGoals } from "@/shared/types"
import { useUpdateGoalsMutation, useCalculateGoalsMutation, useGetProfileQuery } from "@/entities/user/api/userApi"

interface NutritionGoalsProps {
  goals: NutritionGoals | undefined
  isLoading: boolean
  onSuccess: (message: string) => void
}

const schema = yup.object({
  calories: yup.number().min(800, "–ú–∏–Ω–∏–º—É–º 800 –∫–∫–∞–ª").max(5000, "–ú–∞–∫—Å–∏–º—É–º 5000 –∫–∫–∞–ª").required("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
  protein: yup.number().min(30, "–ú–∏–Ω–∏–º—É–º 30–≥").max(300, "–ú–∞–∫—Å–∏–º—É–º 300–≥").required("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
  fat: yup.number().min(20, "–ú–∏–Ω–∏–º—É–º 20–≥").max(200, "–ú–∞–∫—Å–∏–º—É–º 200–≥").required("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
  carbs: yup.number().min(50, "–ú–∏–Ω–∏–º—É–º 50–≥").max(500, "–ú–∞–∫—Å–∏–º—É–º 500–≥").required("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
})

type FormData = yup.InferType<typeof schema>

const NutritionGoalsComponent = ({ goals, isLoading, onSuccess }: NutritionGoalsProps) => {
  const [isEditing, setIsEditing] = useState(false)
  const [showCalculated, setShowCalculated] = useState(false)

  const { data: profile } = useGetProfileQuery()
  const [updateGoals, { isLoading: updating }] = useUpdateGoalsMutation()
  const [calculateGoals, { isLoading: calculating }] = useCalculateGoalsMutation()

  const {
    control,
    handleSubmit,
    reset,
    setValue,
    formState: { errors, isDirty },
  } = useForm<FormData>({
    resolver: yupResolver(schema),
    defaultValues: {
      calories: goals?.calories || 2000,
      protein: goals?.protein || 150,
      fat: goals?.fat || 67,
      carbs: goals?.carbs || 250,
    },
  })

  const onSubmit = async (data: FormData) => {
    try {
      await updateGoals(data).unwrap()
      setIsEditing(false)
      setShowCalculated(false)
      onSuccess("–¶–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    } catch (error) {
      console.error("Failed to update goals:", error)
    }
  }

  const handleCalculate = async () => {
    if (!profile) return

    try {
      const calculatedGoals = await calculateGoals(profile).unwrap()
      setValue("calories", calculatedGoals.calories)
      setValue("protein", calculatedGoals.protein)
      setValue("fat", calculatedGoals.fat)
      setValue("carbs", calculatedGoals.carbs)
      setShowCalculated(true)
    } catch (error) {
      console.error("Failed to calculate goals:", error)
    }
  }

  const handleCancel = () => {
    reset()
    setIsEditing(false)
    setShowCalculated(false)
  }

  if (isLoading) {
    return (
      <Card sx={{ borderRadius: 3 }}>
        <CardContent sx={{ p: 3 }}>
          <Skeleton variant="text" width={200} height={32} sx={{ mb: 2 }} />
          <Grid container spacing={2}>
            {[...Array(4)].map((_, index) => (
              <Grid item xs={12} sm={6} key={index}>
                <Skeleton variant="rectangular" height={56} sx={{ borderRadius: 1 }} />
              </Grid>
            ))}
          </Grid>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card sx={{ borderRadius: 3 }}>
      <CardContent sx={{ p: 3 }}>
        <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "center", mb: 3 }}>
          <Typography variant="h6" fontWeight="bold">
            –¶–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è
          </Typography>
          {!isEditing ? (
            <Button variant="outlined" startIcon={<Edit />} onClick={() => setIsEditing(true)}>
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </Button>
          ) : (
            <Box sx={{ display: "flex", gap: 1 }}>
              <Button onClick={handleCancel} disabled={updating}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button
                variant="contained"
                startIcon={<Save />}
                onClick={handleSubmit(onSubmit)}
                disabled={!isDirty || updating}
              >
                {updating ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}
              </Button>
            </Box>
          )}
        </Box>

        {showCalculated && (
          <Alert severity="info" sx={{ mb: 3 }}>
            –¶–µ–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –∏—Ö —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
          </Alert>
        )}

        {isEditing && profile && (
          <Box sx={{ mb: 3 }}>
            <Button
              variant="outlined"
              startIcon={<Calculate />}
              onClick={handleCalculate}
              disabled={calculating}
              fullWidth
            >
              {calculating ? "–†–∞—Å—á–µ—Ç..." : "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"}
            </Button>
          </Box>
        )}

        <form onSubmit={handleSubmit(onSubmit)}>
          <Grid container spacing={3}>
            <Grid item xs={12} sm={6}>
              <Controller
                name="calories"
                control={control}
                render={({ field }) => (
                  <motion.div whileHover={isEditing ? { scale: 1.02 } : {}}>
                    <TextField
                      {...field}
                      label="–ö–∞–ª–æ—Ä–∏–∏"
                      type="number"
                      fullWidth
                      error={!!errors.calories}
                      helperText={errors.calories?.message}
                      disabled={!isEditing || updating}
                      InputProps={{
                        startAdornment: <LocalFireDepartment sx={{ mr: 1, color: "error.main" }} />,
                        endAdornment: <Typography variant="body2">–∫–∫–∞–ª</Typography>,
                      }}
                    />
                  </motion.div>
                )}
              />
            </Grid>

            <Grid item xs={12} sm={6}>
              <Controller
                name="protein"
                control={control}
                render={({ field }) => (
                  <motion.div whileHover={isEditing ? { scale: 1.02 } : {}}>
                    <TextField
                      {...field}
                      label="–ë–µ–ª–∫–∏"
                      type="number"
                      fullWidth
                      error={!!errors.protein}
                      helperText={errors.protein?.message}
                      disabled={!isEditing || updating}
                      InputProps={{
                        startAdornment: <FitnessCenter sx={{ mr: 1, color: "primary.main" }} />,
                        endAdornment: <Typography variant="body2">–≥</Typography>,
                      }}
                    />
                  </motion.div>
                )}
              />
            </Grid>

            <Grid item xs={12} sm={6}>
              <Controller
                name="fat"
                control={control}
                render={({ field }) => (
                  <motion.div whileHover={isEditing ? { scale: 1.02 } : {}}>
                    <TextField
                      {...field}
                      label="–ñ–∏—Ä—ã"
                      type="number"
                      fullWidth
                      error={!!errors.fat}
                      helperText={errors.fat?.message}
                      disabled={!isEditing || updating}
                      InputProps={{
                        startAdornment: <Opacity sx={{ mr: 1, color: "warning.main" }} />,
                        endAdornment: <Typography variant="body2">–≥</Typography>,
                      }}
                    />
                  </motion.div>
                )}
              />
            </Grid>

            <Grid item xs={12} sm={6}>
              <Controller
                name="carbs"
                control={control}
                render={({ field }) => (
                  <motion.div whileHover={isEditing ? { scale: 1.02 } : {}}>
                    <TextField
                      {...field}
                      label="–£–≥–ª–µ–≤–æ–¥—ã"
                      type="number"
                      fullWidth
                      error={!!errors.carbs}
                      helperText={errors.carbs?.message}
                      disabled={!isEditing || updating}
                      InputProps={{
                        startAdornment: <Grain sx={{ mr: 1, color: "success.main" }} />,
                        endAdornment: <Typography variant="body2">–≥</Typography>,
                      }}
                    />
                  </motion.div>
                )}
              />
            </Grid>
          </Grid>
        </form>

        {!isEditing && (
          <Box sx={{ mt: 3, p: 2, backgroundColor: "action.hover", borderRadius: 2 }}>
            <Typography variant="body2" color="text.secondary">
              üí° –¶–µ–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞, –ø–æ–ª–∞, —Ä–æ—Å—Ç–∞, –≤–µ—Å–∞ –∏ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö
              —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.
            </Typography>
          </Box>
        )}
      </CardContent>
    </Card>
  )
}

NutritionGoalsComponent.displayName = "NutritionGoalsComponent"

export const NutritionGoals = memo(NutritionGoalsComponent)
